// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	NoauthAuthScopes = "noauthAuth.Scopes"
)

// PostAuthLoginMultipartBody defines parameters for PostAuthLogin.
type PostAuthLoginMultipartBody struct {
	// Captcha الزامی
	Captcha *string `json:"captcha,omitempty"`

	// Password رمز ورود
	//
	// الزامی
	Password *string `json:"password,omitempty"`

	// Remember توکن طولانی مدت
	//
	// اختیاری
	Remember *string `json:"remember,omitempty"`

	// Useragent نام بات با پیشوند TraderBot/
	//
	// اختیاری
	Useragent *string `json:"useragent,omitempty"`

	// Username ایمیل کاربر
	//
	// الزامی
	Username *string `json:"username,omitempty"`
}

// PostAuthLoginParams defines parameters for PostAuthLogin.
type PostAuthLoginParams struct {
	// XTOTP رمز یکبارمصرف شناسایی دوعاملی
	XTOTP *string `json:"X-TOTP,omitempty"`
}

// PostMarketOrdersAddMultipartBody defines parameters for PostMarketOrdersAdd.
type PostMarketOrdersAddMultipartBody struct {
	// Amount مقدار رمزارز (حجم)
	//
	// الزامی
	Amount *string `json:"amount,omitempty"`

	// DstCurrency ارز مقصد
	//
	// الزامی
	DstCurrency *string `json:"dstCurrency,omitempty"`

	// Execution نحوه‌ی اجرای سفارش
	//
	// اختیاری
	Execution *string `json:"execution,omitempty"`

	// Mode  حالت سفارش
	//
	// اختیاری
	Mode *string `json:"mode,omitempty"`

	// Price قیمت واحد
	//
	// (الزامی در سفارش‌های قیمت معین)
	Price *string `json:"price,omitempty"`

	// Pro حالت حرفه‌ای
	//
	// اختیاری
	Pro *string `json:"pro,omitempty"`

	// SrcCurrency رمزارز مبدا
	//
	// الزامی
	SrcCurrency *string `json:"srcCurrency,omitempty"`

	// StopLimitPrice قیمت حد ضرر
	//
	// (الزامی در سفارش‌های oco)
	StopLimitPrice *string `json:"stopLimitPrice,omitempty"`

	// StopPrice قیمت توقف
	//
	// (الزامی در سفارش‌های حد ضرر و  oco)
	StopPrice *string `json:"stopPrice,omitempty"`

	// Type نوع سفارش (خرید یا فروش)
	//
	// الزامی
	Type *string `json:"type,omitempty"`
}

// PostMarketOrdersCancelOldMultipartBody defines parameters for PostMarketOrdersCancelOld.
type PostMarketOrdersCancelOldMultipartBody struct {
	// DstCurrency ارز مقصد بازار
	//
	// الزامی
	DstCurrency *string `json:"dstCurrency,omitempty"`

	// Execution نحوه اجرای سفارش‌ها
	//
	// اختیاری
	Execution *string `json:"execution,omitempty"`

	// Hours بازه زمانی سفارش‌ها به ساعت
	//
	// اختیاری
	Hours *string `json:"hours,omitempty"`

	// SrcCurrency رمزارز مبدا بازار
	//
	// الزامی
	SrcCurrency *string `json:"srcCurrency,omitempty"`
}

// GetMarketOrdersListParams defines parameters for GetMarketOrdersList.
type GetMarketOrdersListParams struct {
	// SrcCurrency رمزارز مبدا
	//
	// اختیاری
	SrcCurrency *string `form:"srcCurrency,omitempty" json:"srcCurrency,omitempty"`

	// DstCurrency ارز مقصد
	//
	// اختیاری
	DstCurrency *string `form:"dstCurrency,omitempty" json:"dstCurrency,omitempty"`

	// Details میزان جزئیات پاسخ
	//
	// اختیاری
	Details *int `form:"details,omitempty" json:"details,omitempty"`

	// Status وضعیت سفارش
	//
	// اختیاری
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type نوع سفارش
	// (خرید/فروش)
	//
	// اختیاری
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetMarketOrdersStatusParams defines parameters for GetMarketOrdersStatus.
type GetMarketOrdersStatusParams struct {
	Id            *int    `form:"id,omitempty" json:"id,omitempty"`
	Authorization *string `json:"Authorization,omitempty"`
}

// PostMarketOrdersUpdateStatusMultipartBody defines parameters for PostMarketOrdersUpdateStatus.
type PostMarketOrdersUpdateStatusMultipartBody struct {
	// Order شناسه سفارش
	//
	// الزامی
	Order *string `json:"order,omitempty"`

	// Status وضعیت سفارش
	//
	// الزامی
	Status *string `json:"status,omitempty"`
}

// PostMarketStatsMultipartBody defines parameters for PostMarketStats.
type PostMarketStatsMultipartBody struct {
	// DstCurrency ارزهای مقصد
	//
	// اجباری
	DstCurrency *string `json:"dstCurrency,omitempty"`

	// SrcCurrency ارزهای مبدا
	//
	// اجباری
	SrcCurrency *string `json:"srcCurrency,omitempty"`
}

// GetMarketTradesListParams defines parameters for GetMarketTradesList.
type GetMarketTradesListParams struct {
	// SrcCurrency رمزارز مبدا
	//
	// اختیاری
	SrcCurrency *string `form:"srcCurrency,omitempty" json:"srcCurrency,omitempty"`

	// DstCurrency ارز مقصد
	//
	// اختیاری
	DstCurrency *string `form:"dstCurrency,omitempty" json:"dstCurrency,omitempty"`

	// Page شماره صفحه
	//
	// اختیاری
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize اندازه صفحه
	//
	// اختیاری
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetMarketUdfHistoryParams defines parameters for GetMarketUdfHistory.
type GetMarketUdfHistoryParams struct {
	// Symbol نماد بازار
	//
	// اجباری
	Symbol *string `form:"symbol,omitempty" json:"symbol,omitempty"`

	// Resolution بازه زمانی هر کندل
	//
	// اجباری
	Resolution *string `form:"resolution,omitempty" json:"resolution,omitempty"`

	// From شروع گزارش
	// (زمان یونیکس)
	//
	// اجباری
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// To پایان گزارش
	// (زمان یونیکس)
	//
	// اجباری
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// PostUsersAccountsAddMultipartBody defines parameters for PostUsersAccountsAdd.
type PostUsersAccountsAddMultipartBody struct {
	// Number شماره حساب
	//
	// اختیاری
	Number *string `json:"number,omitempty"`

	// Shaba شماره شبا
	//
	// الزامی
	Shaba *string `json:"shaba,omitempty"`
}

// PostUsersCardsAddMultipartBody defines parameters for PostUsersCardsAdd.
type PostUsersCardsAddMultipartBody struct {
	// Bank نام بانک
	//
	// اختیاری
	Bank *string `json:"bank,omitempty"`

	// Number شماره کارت
	//
	// الزامی
	Number *string `json:"number,omitempty"`
}

// PostUsersReferralLinksAddMultipartBody defines parameters for PostUsersReferralLinksAdd.
type PostUsersReferralLinksAddMultipartBody struct {
	// FriendShare سهم کارمزد اهدایی به دوست دعوت شده با این کد
	//
	// اختیاری
	FriendShare *int `json:"friendShare,omitempty"`
}

// PostUsersReferralSetReferrerMultipartBody defines parameters for PostUsersReferralSetReferrer.
type PostUsersReferralSetReferrerMultipartBody struct {
	// ReferrerCode کد دعوت کاربر دعوت کننده
	//
	// الزامی
	ReferrerCode *string `json:"referrerCode,omitempty"`
}

// GetUsersWalletsDepositsListParams defines parameters for GetUsersWalletsDepositsList.
type GetUsersWalletsDepositsListParams struct {
	// Wallet شناسه کیف پول
	//
	// اختیاری
	Wallet *string `form:"wallet,omitempty" json:"wallet,omitempty"`

	// From شروع گزارش
	//
	// اختیاری
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// To  پایان گزارش
	//
	// اختیاری
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// Page شماره صفحه
	//
	// اختیاری
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize اندازه صفحه
	//
	// اختیاری
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// PostUsersWalletsGenerateAddressMultipartBody defines parameters for PostUsersWalletsGenerateAddress.
type PostUsersWalletsGenerateAddressMultipartBody struct {
	// AddressType نوع پروتکل مورد استفاده
	//
	// اختیاری
	AddressType *string `json:"addressType,omitempty"`

	// Currency رمزارز کیف پول
	//
	// الزامی
	Currency *string `json:"currency,omitempty"`

	// Network شبکه کیف پول
	//
	// اختیاری
	Network *string `json:"network,omitempty"`
}

// GetUsersWalletsTransactionsListParams defines parameters for GetUsersWalletsTransactionsList.
type GetUsersWalletsTransactionsListParams struct {
	// Wallet شناسه کیف پول
	//
	// الزامی
	Wallet *string `form:"wallet,omitempty" json:"wallet,omitempty"`

	// Page شماره صفحه
	//
	// اختیاری
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize اندازه صفحه
	//
	// اختیاری
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetUsersWalletsWithdrawParams defines parameters for GetUsersWalletsWithdraw.
type GetUsersWalletsWithdrawParams struct {
	// XTOTP کد شناسایی دوعاملی
	XTOTP *string `json:"X-TOTP,omitempty"`
}

// PostUsersWalletsWithdrawConfirmMultipartBody defines parameters for PostUsersWalletsWithdrawConfirm.
type PostUsersWalletsWithdrawConfirmMultipartBody struct {
	// Otp رمز یکبارمصرف ارسال شده
	Otp *string `json:"otp,omitempty"`

	// Withdraw شناسه درخواست برداشت
	Withdraw *string `json:"withdraw,omitempty"`
}

// GetUsersWalletsWithdrawsListParams defines parameters for GetUsersWalletsWithdrawsList.
type GetUsersWalletsWithdrawsListParams struct {
	// Wallet شناسه کیف پول
	//
	// اختیاری
	Wallet *string `form:"wallet,omitempty" json:"wallet,omitempty"`

	// From شروع گزارش
	//
	// اختیاری
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// To  پایان گزارش
	//
	// اختیاری
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// Page شماره صفحه
	//
	// اختیاری
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize اندازه صفحه
	//
	// اختیاری
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// GetV2WalletsParams defines parameters for GetV2Wallets.
type GetV2WalletsParams struct {
	// Currencies ارز کیف پول‌ها
	// (جدا شده با ویرگول)
	// اختیاری
	Currencies *string `form:"currencies,omitempty" json:"currencies,omitempty"`
}

// PostAuthLoginMultipartRequestBody defines body for PostAuthLogin for multipart/form-data ContentType.
type PostAuthLoginMultipartRequestBody PostAuthLoginMultipartBody

// PostMarketOrdersAddMultipartRequestBody defines body for PostMarketOrdersAdd for multipart/form-data ContentType.
type PostMarketOrdersAddMultipartRequestBody PostMarketOrdersAddMultipartBody

// PostMarketOrdersCancelOldMultipartRequestBody defines body for PostMarketOrdersCancelOld for multipart/form-data ContentType.
type PostMarketOrdersCancelOldMultipartRequestBody PostMarketOrdersCancelOldMultipartBody

// PostMarketOrdersUpdateStatusMultipartRequestBody defines body for PostMarketOrdersUpdateStatus for multipart/form-data ContentType.
type PostMarketOrdersUpdateStatusMultipartRequestBody PostMarketOrdersUpdateStatusMultipartBody

// PostMarketStatsMultipartRequestBody defines body for PostMarketStats for multipart/form-data ContentType.
type PostMarketStatsMultipartRequestBody PostMarketStatsMultipartBody

// PostUsersAccountsAddMultipartRequestBody defines body for PostUsersAccountsAdd for multipart/form-data ContentType.
type PostUsersAccountsAddMultipartRequestBody PostUsersAccountsAddMultipartBody

// PostUsersCardsAddMultipartRequestBody defines body for PostUsersCardsAdd for multipart/form-data ContentType.
type PostUsersCardsAddMultipartRequestBody PostUsersCardsAddMultipartBody

// PostUsersReferralLinksAddMultipartRequestBody defines body for PostUsersReferralLinksAdd for multipart/form-data ContentType.
type PostUsersReferralLinksAddMultipartRequestBody PostUsersReferralLinksAddMultipartBody

// PostUsersReferralSetReferrerMultipartRequestBody defines body for PostUsersReferralSetReferrer for multipart/form-data ContentType.
type PostUsersReferralSetReferrerMultipartRequestBody PostUsersReferralSetReferrerMultipartBody

// PostUsersWalletsGenerateAddressMultipartRequestBody defines body for PostUsersWalletsGenerateAddress for multipart/form-data ContentType.
type PostUsersWalletsGenerateAddressMultipartRequestBody PostUsersWalletsGenerateAddressMultipartBody

// PostUsersWalletsWithdrawConfirmMultipartRequestBody defines body for PostUsersWalletsWithdrawConfirm for multipart/form-data ContentType.
type PostUsersWalletsWithdrawConfirmMultipartRequestBody PostUsersWalletsWithdrawConfirmMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthLoginWithBody request with any body
	PostAuthLoginWithBody(ctx context.Context, params *PostAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLogoutWithBody request with any body
	PostAuthLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketGlobalStatsWithBody request with any body
	PostMarketGlobalStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketOrdersAddWithBody request with any body
	PostMarketOrdersAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketOrdersCancelOldWithBody request with any body
	PostMarketOrdersCancelOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketOrdersList request
	GetMarketOrdersList(ctx context.Context, params *GetMarketOrdersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketOrdersStatus request
	GetMarketOrdersStatus(ctx context.Context, params *GetMarketOrdersStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketOrdersUpdateStatusWithBody request with any body
	PostMarketOrdersUpdateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketStatsWithBody request with any body
	PostMarketStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketTradesList request
	GetMarketTradesList(ctx context.Context, params *GetMarketTradesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketUdfHistory request
	GetMarketUdfHistory(ctx context.Context, params *GetMarketUdfHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityEmergencyCancelActivateWithBody request with any body
	PostSecurityEmergencyCancelActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersAccountsAddWithBody request with any body
	PostUsersAccountsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersCardsAddWithBody request with any body
	PostUsersCardsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersLimitations request
	GetUsersLimitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersLoginAttempts request
	GetUsersLoginAttempts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersProfile request
	GetUsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersReferralLinksAddWithBody request with any body
	PostUsersReferralLinksAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersReferralLinksList request
	GetUsersReferralLinksList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersReferralSetReferrerWithBody request with any body
	PostUsersReferralSetReferrerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersWalletsDepositsList request
	GetUsersWalletsDepositsList(ctx context.Context, params *GetUsersWalletsDepositsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWalletsGenerateAddressWithBody request with any body
	PostUsersWalletsGenerateAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersWalletsTransactionsList request
	GetUsersWalletsTransactionsList(ctx context.Context, params *GetUsersWalletsTransactionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersWalletsWithdraw request
	GetUsersWalletsWithdraw(ctx context.Context, params *GetUsersWalletsWithdrawParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWalletsWithdrawConfirmWithBody request with any body
	PostUsersWalletsWithdrawConfirmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersWalletsWithdrawsList request
	GetUsersWalletsWithdrawsList(ctx context.Context, params *GetUsersWalletsWithdrawsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Options request
	GetV2Options(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2OrderbookSymbol request
	GetV2OrderbookSymbol(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2TradesSymbol request
	GetV2TradesSymbol(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Wallets request
	GetV2Wallets(ctx context.Context, params *GetV2WalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithdrawsWithdraw request
	GetWithdrawsWithdraw(ctx context.Context, withdraw string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, params *PostAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLogoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketGlobalStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketGlobalStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketOrdersAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketOrdersAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketOrdersCancelOldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketOrdersCancelOldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketOrdersList(ctx context.Context, params *GetMarketOrdersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketOrdersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketOrdersStatus(ctx context.Context, params *GetMarketOrdersStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketOrdersStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketOrdersUpdateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketOrdersUpdateStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketTradesList(ctx context.Context, params *GetMarketTradesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketTradesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketUdfHistory(ctx context.Context, params *GetMarketUdfHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketUdfHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityEmergencyCancelActivateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityEmergencyCancelActivateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersAccountsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersAccountsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersCardsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersCardsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersLimitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersLimitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersLoginAttempts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersLoginAttemptsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersReferralLinksAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersReferralLinksAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersReferralLinksList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersReferralLinksListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersReferralSetReferrerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersReferralSetReferrerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWalletsDepositsList(ctx context.Context, params *GetUsersWalletsDepositsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersWalletsDepositsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWalletsGenerateAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersWalletsGenerateAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWalletsTransactionsList(ctx context.Context, params *GetUsersWalletsTransactionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersWalletsTransactionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWalletsWithdraw(ctx context.Context, params *GetUsersWalletsWithdrawParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersWalletsWithdrawRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWalletsWithdrawConfirmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersWalletsWithdrawConfirmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersWalletsWithdrawsList(ctx context.Context, params *GetUsersWalletsWithdrawsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersWalletsWithdrawsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Options(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2OptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2OrderbookSymbol(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2OrderbookSymbolRequest(c.Server, symbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2TradesSymbol(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2TradesSymbolRequest(c.Server, symbol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Wallets(ctx context.Context, params *GetV2WalletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2WalletsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithdrawsWithdraw(ctx context.Context, withdraw string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithdrawsWithdrawRequest(c.Server, withdraw)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, params *PostAuthLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTOTP != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-TOTP", runtime.ParamLocationHeader, *params.XTOTP)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-TOTP", headerParam0)
		}

	}

	return req, nil
}

// NewPostAuthLogoutRequestWithBody generates requests for PostAuthLogout with any type of body
func NewPostAuthLogoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMarketGlobalStatsRequestWithBody generates requests for PostMarketGlobalStats with any type of body
func NewPostMarketGlobalStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/global-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMarketOrdersAddRequestWithBody generates requests for PostMarketOrdersAdd with any type of body
func NewPostMarketOrdersAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/orders/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMarketOrdersCancelOldRequestWithBody generates requests for PostMarketOrdersCancelOld with any type of body
func NewPostMarketOrdersCancelOldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/orders/cancel-old")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMarketOrdersListRequest generates requests for GetMarketOrdersList
func NewGetMarketOrdersListRequest(server string, params *GetMarketOrdersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/orders/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SrcCurrency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "srcCurrency", runtime.ParamLocationQuery, *params.SrcCurrency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstCurrency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dstCurrency", runtime.ParamLocationQuery, *params.DstCurrency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Details != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "details", runtime.ParamLocationQuery, *params.Details); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketOrdersStatusRequest generates requests for GetMarketOrdersStatus
func NewGetMarketOrdersStatusRequest(server string, params *GetMarketOrdersStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/orders/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewPostMarketOrdersUpdateStatusRequestWithBody generates requests for PostMarketOrdersUpdateStatus with any type of body
func NewPostMarketOrdersUpdateStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/orders/update-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMarketStatsRequestWithBody generates requests for PostMarketStats with any type of body
func NewPostMarketStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMarketTradesListRequest generates requests for GetMarketTradesList
func NewGetMarketTradesListRequest(server string, params *GetMarketTradesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/trades/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SrcCurrency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "srcCurrency", runtime.ParamLocationQuery, *params.SrcCurrency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstCurrency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dstCurrency", runtime.ParamLocationQuery, *params.DstCurrency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketUdfHistoryRequest generates requests for GetMarketUdfHistory
func NewGetMarketUdfHistoryRequest(server string, params *GetMarketUdfHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market/udf/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Symbol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, *params.Symbol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSecurityEmergencyCancelActivateRequestWithBody generates requests for PostSecurityEmergencyCancelActivate with any type of body
func NewPostSecurityEmergencyCancelActivateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/security/emergency-cancel/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersAccountsAddRequestWithBody generates requests for PostUsersAccountsAdd with any type of body
func NewPostUsersAccountsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/accounts-add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersCardsAddRequestWithBody generates requests for PostUsersCardsAdd with any type of body
func NewPostUsersCardsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/cards-add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersLimitationsRequest generates requests for GetUsersLimitations
func NewGetUsersLimitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/limitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersLoginAttemptsRequest generates requests for GetUsersLoginAttempts
func NewGetUsersLoginAttemptsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login-attempts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersProfileRequest generates requests for GetUsersProfile
func NewGetUsersProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersReferralLinksAddRequestWithBody generates requests for PostUsersReferralLinksAdd with any type of body
func NewPostUsersReferralLinksAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/referral/links-add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersReferralLinksListRequest generates requests for GetUsersReferralLinksList
func NewGetUsersReferralLinksListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/referral/links-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersReferralSetReferrerRequestWithBody generates requests for PostUsersReferralSetReferrer with any type of body
func NewPostUsersReferralSetReferrerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/referral/set-referrer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersWalletsDepositsListRequest generates requests for GetUsersWalletsDepositsList
func NewGetUsersWalletsDepositsListRequest(server string, params *GetUsersWalletsDepositsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/deposits/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Wallet != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wallet", runtime.ParamLocationQuery, *params.Wallet); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersWalletsGenerateAddressRequestWithBody generates requests for PostUsersWalletsGenerateAddress with any type of body
func NewPostUsersWalletsGenerateAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/generate-address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersWalletsTransactionsListRequest generates requests for GetUsersWalletsTransactionsList
func NewGetUsersWalletsTransactionsListRequest(server string, params *GetUsersWalletsTransactionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/transactions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Wallet != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wallet", runtime.ParamLocationQuery, *params.Wallet); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersWalletsWithdrawRequest generates requests for GetUsersWalletsWithdraw
func NewGetUsersWalletsWithdrawRequest(server string, params *GetUsersWalletsWithdrawParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/withdraw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XTOTP != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-TOTP", runtime.ParamLocationHeader, *params.XTOTP)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-TOTP", headerParam0)
		}

	}

	return req, nil
}

// NewPostUsersWalletsWithdrawConfirmRequestWithBody generates requests for PostUsersWalletsWithdrawConfirm with any type of body
func NewPostUsersWalletsWithdrawConfirmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/withdraw-confirm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersWalletsWithdrawsListRequest generates requests for GetUsersWalletsWithdrawsList
func NewGetUsersWalletsWithdrawsListRequest(server string, params *GetUsersWalletsWithdrawsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/wallets/withdraws/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Wallet != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wallet", runtime.ParamLocationQuery, *params.Wallet); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2OptionsRequest generates requests for GetV2Options
func NewGetV2OptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2OrderbookSymbolRequest generates requests for GetV2OrderbookSymbol
func NewGetV2OrderbookSymbolRequest(server string, symbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/orderbook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2TradesSymbolRequest generates requests for GetV2TradesSymbol
func NewGetV2TradesSymbolRequest(server string, symbol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/trades/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2WalletsRequest generates requests for GetV2Wallets
func NewGetV2WalletsRequest(server string, params *GetV2WalletsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/wallets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Currencies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currencies", runtime.ParamLocationQuery, *params.Currencies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithdrawsWithdrawRequest generates requests for GetWithdrawsWithdraw
func NewGetWithdrawsWithdrawRequest(server string, withdraw string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "withdraw", runtime.ParamLocationPath, withdraw)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/withdraws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthLoginWithBodyWithResponse request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, params *PostAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// PostAuthLogoutWithBodyWithResponse request with any body
	PostAuthLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error)

	// PostMarketGlobalStatsWithBodyWithResponse request with any body
	PostMarketGlobalStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketGlobalStatsResponse, error)

	// PostMarketOrdersAddWithBodyWithResponse request with any body
	PostMarketOrdersAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersAddResponse, error)

	// PostMarketOrdersCancelOldWithBodyWithResponse request with any body
	PostMarketOrdersCancelOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersCancelOldResponse, error)

	// GetMarketOrdersListWithResponse request
	GetMarketOrdersListWithResponse(ctx context.Context, params *GetMarketOrdersListParams, reqEditors ...RequestEditorFn) (*GetMarketOrdersListResponse, error)

	// GetMarketOrdersStatusWithResponse request
	GetMarketOrdersStatusWithResponse(ctx context.Context, params *GetMarketOrdersStatusParams, reqEditors ...RequestEditorFn) (*GetMarketOrdersStatusResponse, error)

	// PostMarketOrdersUpdateStatusWithBodyWithResponse request with any body
	PostMarketOrdersUpdateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersUpdateStatusResponse, error)

	// PostMarketStatsWithBodyWithResponse request with any body
	PostMarketStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketStatsResponse, error)

	// GetMarketTradesListWithResponse request
	GetMarketTradesListWithResponse(ctx context.Context, params *GetMarketTradesListParams, reqEditors ...RequestEditorFn) (*GetMarketTradesListResponse, error)

	// GetMarketUdfHistoryWithResponse request
	GetMarketUdfHistoryWithResponse(ctx context.Context, params *GetMarketUdfHistoryParams, reqEditors ...RequestEditorFn) (*GetMarketUdfHistoryResponse, error)

	// PostSecurityEmergencyCancelActivateWithBodyWithResponse request with any body
	PostSecurityEmergencyCancelActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityEmergencyCancelActivateResponse, error)

	// PostUsersAccountsAddWithBodyWithResponse request with any body
	PostUsersAccountsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersAccountsAddResponse, error)

	// PostUsersCardsAddWithBodyWithResponse request with any body
	PostUsersCardsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersCardsAddResponse, error)

	// GetUsersLimitationsWithResponse request
	GetUsersLimitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersLimitationsResponse, error)

	// GetUsersLoginAttemptsWithResponse request
	GetUsersLoginAttemptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersLoginAttemptsResponse, error)

	// GetUsersProfileWithResponse request
	GetUsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersProfileResponse, error)

	// PostUsersReferralLinksAddWithBodyWithResponse request with any body
	PostUsersReferralLinksAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersReferralLinksAddResponse, error)

	// GetUsersReferralLinksListWithResponse request
	GetUsersReferralLinksListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersReferralLinksListResponse, error)

	// PostUsersReferralSetReferrerWithBodyWithResponse request with any body
	PostUsersReferralSetReferrerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersReferralSetReferrerResponse, error)

	// GetUsersWalletsDepositsListWithResponse request
	GetUsersWalletsDepositsListWithResponse(ctx context.Context, params *GetUsersWalletsDepositsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsDepositsListResponse, error)

	// PostUsersWalletsGenerateAddressWithBodyWithResponse request with any body
	PostUsersWalletsGenerateAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersWalletsGenerateAddressResponse, error)

	// GetUsersWalletsTransactionsListWithResponse request
	GetUsersWalletsTransactionsListWithResponse(ctx context.Context, params *GetUsersWalletsTransactionsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsTransactionsListResponse, error)

	// GetUsersWalletsWithdrawWithResponse request
	GetUsersWalletsWithdrawWithResponse(ctx context.Context, params *GetUsersWalletsWithdrawParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsWithdrawResponse, error)

	// PostUsersWalletsWithdrawConfirmWithBodyWithResponse request with any body
	PostUsersWalletsWithdrawConfirmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersWalletsWithdrawConfirmResponse, error)

	// GetUsersWalletsWithdrawsListWithResponse request
	GetUsersWalletsWithdrawsListWithResponse(ctx context.Context, params *GetUsersWalletsWithdrawsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsWithdrawsListResponse, error)

	// GetV2OptionsWithResponse request
	GetV2OptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2OptionsResponse, error)

	// GetV2OrderbookSymbolWithResponse request
	GetV2OrderbookSymbolWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetV2OrderbookSymbolResponse, error)

	// GetV2TradesSymbolWithResponse request
	GetV2TradesSymbolWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetV2TradesSymbolResponse, error)

	// GetV2WalletsWithResponse request
	GetV2WalletsWithResponse(ctx context.Context, params *GetV2WalletsParams, reqEditors ...RequestEditorFn) (*GetV2WalletsResponse, error)

	// GetWithdrawsWithdrawWithResponse request
	GetWithdrawsWithdrawWithResponse(ctx context.Context, withdraw string, reqEditors ...RequestEditorFn) (*GetWithdrawsWithdrawResponse, error)
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketGlobalStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMarketGlobalStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketGlobalStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketOrdersAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMarketOrdersAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketOrdersAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketOrdersCancelOldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMarketOrdersCancelOldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketOrdersCancelOldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketOrdersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMarketOrdersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketOrdersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketOrdersStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMarketOrdersStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketOrdersStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketOrdersUpdateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMarketOrdersUpdateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketOrdersUpdateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostMarketStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketTradesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMarketTradesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketTradesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketUdfHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMarketUdfHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketUdfHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityEmergencyCancelActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostSecurityEmergencyCancelActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityEmergencyCancelActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersAccountsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersAccountsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersAccountsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersCardsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersCardsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersCardsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersLimitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersLimitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersLimitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersLoginAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersLoginAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersLoginAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersReferralLinksAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersReferralLinksAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersReferralLinksAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersReferralLinksListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersReferralLinksListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersReferralLinksListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersReferralSetReferrerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersReferralSetReferrerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersReferralSetReferrerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersWalletsDepositsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersWalletsDepositsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersWalletsDepositsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersWalletsGenerateAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersWalletsGenerateAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersWalletsGenerateAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersWalletsTransactionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersWalletsTransactionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersWalletsTransactionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersWalletsWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersWalletsWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersWalletsWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersWalletsWithdrawConfirmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostUsersWalletsWithdrawConfirmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersWalletsWithdrawConfirmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersWalletsWithdrawsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsersWalletsWithdrawsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersWalletsWithdrawsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2OptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetV2OptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2OptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2OrderbookSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetV2OrderbookSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2OrderbookSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2TradesSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetV2TradesSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2TradesSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2WalletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetV2WalletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2WalletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithdrawsWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetWithdrawsWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithdrawsWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, params *PostAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// PostAuthLogoutWithBodyWithResponse request with arbitrary body returning *PostAuthLogoutResponse
func (c *ClientWithResponses) PostAuthLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error) {
	rsp, err := c.PostAuthLogoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLogoutResponse(rsp)
}

// PostMarketGlobalStatsWithBodyWithResponse request with arbitrary body returning *PostMarketGlobalStatsResponse
func (c *ClientWithResponses) PostMarketGlobalStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketGlobalStatsResponse, error) {
	rsp, err := c.PostMarketGlobalStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketGlobalStatsResponse(rsp)
}

// PostMarketOrdersAddWithBodyWithResponse request with arbitrary body returning *PostMarketOrdersAddResponse
func (c *ClientWithResponses) PostMarketOrdersAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersAddResponse, error) {
	rsp, err := c.PostMarketOrdersAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketOrdersAddResponse(rsp)
}

// PostMarketOrdersCancelOldWithBodyWithResponse request with arbitrary body returning *PostMarketOrdersCancelOldResponse
func (c *ClientWithResponses) PostMarketOrdersCancelOldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersCancelOldResponse, error) {
	rsp, err := c.PostMarketOrdersCancelOldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketOrdersCancelOldResponse(rsp)
}

// GetMarketOrdersListWithResponse request returning *GetMarketOrdersListResponse
func (c *ClientWithResponses) GetMarketOrdersListWithResponse(ctx context.Context, params *GetMarketOrdersListParams, reqEditors ...RequestEditorFn) (*GetMarketOrdersListResponse, error) {
	rsp, err := c.GetMarketOrdersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketOrdersListResponse(rsp)
}

// GetMarketOrdersStatusWithResponse request returning *GetMarketOrdersStatusResponse
func (c *ClientWithResponses) GetMarketOrdersStatusWithResponse(ctx context.Context, params *GetMarketOrdersStatusParams, reqEditors ...RequestEditorFn) (*GetMarketOrdersStatusResponse, error) {
	rsp, err := c.GetMarketOrdersStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketOrdersStatusResponse(rsp)
}

// PostMarketOrdersUpdateStatusWithBodyWithResponse request with arbitrary body returning *PostMarketOrdersUpdateStatusResponse
func (c *ClientWithResponses) PostMarketOrdersUpdateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketOrdersUpdateStatusResponse, error) {
	rsp, err := c.PostMarketOrdersUpdateStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketOrdersUpdateStatusResponse(rsp)
}

// PostMarketStatsWithBodyWithResponse request with arbitrary body returning *PostMarketStatsResponse
func (c *ClientWithResponses) PostMarketStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMarketStatsResponse, error) {
	rsp, err := c.PostMarketStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketStatsResponse(rsp)
}

// GetMarketTradesListWithResponse request returning *GetMarketTradesListResponse
func (c *ClientWithResponses) GetMarketTradesListWithResponse(ctx context.Context, params *GetMarketTradesListParams, reqEditors ...RequestEditorFn) (*GetMarketTradesListResponse, error) {
	rsp, err := c.GetMarketTradesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketTradesListResponse(rsp)
}

// GetMarketUdfHistoryWithResponse request returning *GetMarketUdfHistoryResponse
func (c *ClientWithResponses) GetMarketUdfHistoryWithResponse(ctx context.Context, params *GetMarketUdfHistoryParams, reqEditors ...RequestEditorFn) (*GetMarketUdfHistoryResponse, error) {
	rsp, err := c.GetMarketUdfHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketUdfHistoryResponse(rsp)
}

// PostSecurityEmergencyCancelActivateWithBodyWithResponse request with arbitrary body returning *PostSecurityEmergencyCancelActivateResponse
func (c *ClientWithResponses) PostSecurityEmergencyCancelActivateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityEmergencyCancelActivateResponse, error) {
	rsp, err := c.PostSecurityEmergencyCancelActivateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityEmergencyCancelActivateResponse(rsp)
}

// PostUsersAccountsAddWithBodyWithResponse request with arbitrary body returning *PostUsersAccountsAddResponse
func (c *ClientWithResponses) PostUsersAccountsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersAccountsAddResponse, error) {
	rsp, err := c.PostUsersAccountsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersAccountsAddResponse(rsp)
}

// PostUsersCardsAddWithBodyWithResponse request with arbitrary body returning *PostUsersCardsAddResponse
func (c *ClientWithResponses) PostUsersCardsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersCardsAddResponse, error) {
	rsp, err := c.PostUsersCardsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersCardsAddResponse(rsp)
}

// GetUsersLimitationsWithResponse request returning *GetUsersLimitationsResponse
func (c *ClientWithResponses) GetUsersLimitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersLimitationsResponse, error) {
	rsp, err := c.GetUsersLimitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersLimitationsResponse(rsp)
}

// GetUsersLoginAttemptsWithResponse request returning *GetUsersLoginAttemptsResponse
func (c *ClientWithResponses) GetUsersLoginAttemptsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersLoginAttemptsResponse, error) {
	rsp, err := c.GetUsersLoginAttempts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersLoginAttemptsResponse(rsp)
}

// GetUsersProfileWithResponse request returning *GetUsersProfileResponse
func (c *ClientWithResponses) GetUsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersProfileResponse, error) {
	rsp, err := c.GetUsersProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersProfileResponse(rsp)
}

// PostUsersReferralLinksAddWithBodyWithResponse request with arbitrary body returning *PostUsersReferralLinksAddResponse
func (c *ClientWithResponses) PostUsersReferralLinksAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersReferralLinksAddResponse, error) {
	rsp, err := c.PostUsersReferralLinksAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersReferralLinksAddResponse(rsp)
}

// GetUsersReferralLinksListWithResponse request returning *GetUsersReferralLinksListResponse
func (c *ClientWithResponses) GetUsersReferralLinksListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersReferralLinksListResponse, error) {
	rsp, err := c.GetUsersReferralLinksList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersReferralLinksListResponse(rsp)
}

// PostUsersReferralSetReferrerWithBodyWithResponse request with arbitrary body returning *PostUsersReferralSetReferrerResponse
func (c *ClientWithResponses) PostUsersReferralSetReferrerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersReferralSetReferrerResponse, error) {
	rsp, err := c.PostUsersReferralSetReferrerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersReferralSetReferrerResponse(rsp)
}

// GetUsersWalletsDepositsListWithResponse request returning *GetUsersWalletsDepositsListResponse
func (c *ClientWithResponses) GetUsersWalletsDepositsListWithResponse(ctx context.Context, params *GetUsersWalletsDepositsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsDepositsListResponse, error) {
	rsp, err := c.GetUsersWalletsDepositsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersWalletsDepositsListResponse(rsp)
}

// PostUsersWalletsGenerateAddressWithBodyWithResponse request with arbitrary body returning *PostUsersWalletsGenerateAddressResponse
func (c *ClientWithResponses) PostUsersWalletsGenerateAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersWalletsGenerateAddressResponse, error) {
	rsp, err := c.PostUsersWalletsGenerateAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersWalletsGenerateAddressResponse(rsp)
}

// GetUsersWalletsTransactionsListWithResponse request returning *GetUsersWalletsTransactionsListResponse
func (c *ClientWithResponses) GetUsersWalletsTransactionsListWithResponse(ctx context.Context, params *GetUsersWalletsTransactionsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsTransactionsListResponse, error) {
	rsp, err := c.GetUsersWalletsTransactionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersWalletsTransactionsListResponse(rsp)
}

// GetUsersWalletsWithdrawWithResponse request returning *GetUsersWalletsWithdrawResponse
func (c *ClientWithResponses) GetUsersWalletsWithdrawWithResponse(ctx context.Context, params *GetUsersWalletsWithdrawParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsWithdrawResponse, error) {
	rsp, err := c.GetUsersWalletsWithdraw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersWalletsWithdrawResponse(rsp)
}

// PostUsersWalletsWithdrawConfirmWithBodyWithResponse request with arbitrary body returning *PostUsersWalletsWithdrawConfirmResponse
func (c *ClientWithResponses) PostUsersWalletsWithdrawConfirmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersWalletsWithdrawConfirmResponse, error) {
	rsp, err := c.PostUsersWalletsWithdrawConfirmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersWalletsWithdrawConfirmResponse(rsp)
}

// GetUsersWalletsWithdrawsListWithResponse request returning *GetUsersWalletsWithdrawsListResponse
func (c *ClientWithResponses) GetUsersWalletsWithdrawsListWithResponse(ctx context.Context, params *GetUsersWalletsWithdrawsListParams, reqEditors ...RequestEditorFn) (*GetUsersWalletsWithdrawsListResponse, error) {
	rsp, err := c.GetUsersWalletsWithdrawsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersWalletsWithdrawsListResponse(rsp)
}

// GetV2OptionsWithResponse request returning *GetV2OptionsResponse
func (c *ClientWithResponses) GetV2OptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2OptionsResponse, error) {
	rsp, err := c.GetV2Options(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2OptionsResponse(rsp)
}

// GetV2OrderbookSymbolWithResponse request returning *GetV2OrderbookSymbolResponse
func (c *ClientWithResponses) GetV2OrderbookSymbolWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetV2OrderbookSymbolResponse, error) {
	rsp, err := c.GetV2OrderbookSymbol(ctx, symbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2OrderbookSymbolResponse(rsp)
}

// GetV2TradesSymbolWithResponse request returning *GetV2TradesSymbolResponse
func (c *ClientWithResponses) GetV2TradesSymbolWithResponse(ctx context.Context, symbol string, reqEditors ...RequestEditorFn) (*GetV2TradesSymbolResponse, error) {
	rsp, err := c.GetV2TradesSymbol(ctx, symbol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2TradesSymbolResponse(rsp)
}

// GetV2WalletsWithResponse request returning *GetV2WalletsResponse
func (c *ClientWithResponses) GetV2WalletsWithResponse(ctx context.Context, params *GetV2WalletsParams, reqEditors ...RequestEditorFn) (*GetV2WalletsResponse, error) {
	rsp, err := c.GetV2Wallets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2WalletsResponse(rsp)
}

// GetWithdrawsWithdrawWithResponse request returning *GetWithdrawsWithdrawResponse
func (c *ClientWithResponses) GetWithdrawsWithdrawWithResponse(ctx context.Context, withdraw string, reqEditors ...RequestEditorFn) (*GetWithdrawsWithdrawResponse, error) {
	rsp, err := c.GetWithdrawsWithdraw(ctx, withdraw, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithdrawsWithdrawResponse(rsp)
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostAuthLogoutResponse parses an HTTP response from a PostAuthLogoutWithResponse call
func ParsePostAuthLogoutResponse(rsp *http.Response) (*PostAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostMarketGlobalStatsResponse parses an HTTP response from a PostMarketGlobalStatsWithResponse call
func ParsePostMarketGlobalStatsResponse(rsp *http.Response) (*PostMarketGlobalStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketGlobalStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMarketOrdersAddResponse parses an HTTP response from a PostMarketOrdersAddWithResponse call
func ParsePostMarketOrdersAddResponse(rsp *http.Response) (*PostMarketOrdersAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketOrdersAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMarketOrdersCancelOldResponse parses an HTTP response from a PostMarketOrdersCancelOldWithResponse call
func ParsePostMarketOrdersCancelOldResponse(rsp *http.Response) (*PostMarketOrdersCancelOldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketOrdersCancelOldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketOrdersListResponse parses an HTTP response from a GetMarketOrdersListWithResponse call
func ParseGetMarketOrdersListResponse(rsp *http.Response) (*GetMarketOrdersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketOrdersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketOrdersStatusResponse parses an HTTP response from a GetMarketOrdersStatusWithResponse call
func ParseGetMarketOrdersStatusResponse(rsp *http.Response) (*GetMarketOrdersStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketOrdersStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMarketOrdersUpdateStatusResponse parses an HTTP response from a PostMarketOrdersUpdateStatusWithResponse call
func ParsePostMarketOrdersUpdateStatusResponse(rsp *http.Response) (*PostMarketOrdersUpdateStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketOrdersUpdateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostMarketStatsResponse parses an HTTP response from a PostMarketStatsWithResponse call
func ParsePostMarketStatsResponse(rsp *http.Response) (*PostMarketStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketTradesListResponse parses an HTTP response from a GetMarketTradesListWithResponse call
func ParseGetMarketTradesListResponse(rsp *http.Response) (*GetMarketTradesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketTradesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarketUdfHistoryResponse parses an HTTP response from a GetMarketUdfHistoryWithResponse call
func ParseGetMarketUdfHistoryResponse(rsp *http.Response) (*GetMarketUdfHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketUdfHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityEmergencyCancelActivateResponse parses an HTTP response from a PostSecurityEmergencyCancelActivateWithResponse call
func ParsePostSecurityEmergencyCancelActivateResponse(rsp *http.Response) (*PostSecurityEmergencyCancelActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityEmergencyCancelActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersAccountsAddResponse parses an HTTP response from a PostUsersAccountsAddWithResponse call
func ParsePostUsersAccountsAddResponse(rsp *http.Response) (*PostUsersAccountsAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersAccountsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostUsersCardsAddResponse parses an HTTP response from a PostUsersCardsAddWithResponse call
func ParsePostUsersCardsAddResponse(rsp *http.Response) (*PostUsersCardsAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersCardsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersLimitationsResponse parses an HTTP response from a GetUsersLimitationsWithResponse call
func ParseGetUsersLimitationsResponse(rsp *http.Response) (*GetUsersLimitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersLimitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersLoginAttemptsResponse parses an HTTP response from a GetUsersLoginAttemptsWithResponse call
func ParseGetUsersLoginAttemptsResponse(rsp *http.Response) (*GetUsersLoginAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersLoginAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersProfileResponse parses an HTTP response from a GetUsersProfileWithResponse call
func ParseGetUsersProfileResponse(rsp *http.Response) (*GetUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersReferralLinksAddResponse parses an HTTP response from a PostUsersReferralLinksAddWithResponse call
func ParsePostUsersReferralLinksAddResponse(rsp *http.Response) (*PostUsersReferralLinksAddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersReferralLinksAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersReferralLinksListResponse parses an HTTP response from a GetUsersReferralLinksListWithResponse call
func ParseGetUsersReferralLinksListResponse(rsp *http.Response) (*GetUsersReferralLinksListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersReferralLinksListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersReferralSetReferrerResponse parses an HTTP response from a PostUsersReferralSetReferrerWithResponse call
func ParsePostUsersReferralSetReferrerResponse(rsp *http.Response) (*PostUsersReferralSetReferrerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersReferralSetReferrerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersWalletsDepositsListResponse parses an HTTP response from a GetUsersWalletsDepositsListWithResponse call
func ParseGetUsersWalletsDepositsListResponse(rsp *http.Response) (*GetUsersWalletsDepositsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersWalletsDepositsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersWalletsGenerateAddressResponse parses an HTTP response from a PostUsersWalletsGenerateAddressWithResponse call
func ParsePostUsersWalletsGenerateAddressResponse(rsp *http.Response) (*PostUsersWalletsGenerateAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersWalletsGenerateAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersWalletsTransactionsListResponse parses an HTTP response from a GetUsersWalletsTransactionsListWithResponse call
func ParseGetUsersWalletsTransactionsListResponse(rsp *http.Response) (*GetUsersWalletsTransactionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersWalletsTransactionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersWalletsWithdrawResponse parses an HTTP response from a GetUsersWalletsWithdrawWithResponse call
func ParseGetUsersWalletsWithdrawResponse(rsp *http.Response) (*GetUsersWalletsWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersWalletsWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersWalletsWithdrawConfirmResponse parses an HTTP response from a PostUsersWalletsWithdrawConfirmWithResponse call
func ParsePostUsersWalletsWithdrawConfirmResponse(rsp *http.Response) (*PostUsersWalletsWithdrawConfirmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersWalletsWithdrawConfirmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersWalletsWithdrawsListResponse parses an HTTP response from a GetUsersWalletsWithdrawsListWithResponse call
func ParseGetUsersWalletsWithdrawsListResponse(rsp *http.Response) (*GetUsersWalletsWithdrawsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersWalletsWithdrawsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2OptionsResponse parses an HTTP response from a GetV2OptionsWithResponse call
func ParseGetV2OptionsResponse(rsp *http.Response) (*GetV2OptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2OptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2OrderbookSymbolResponse parses an HTTP response from a GetV2OrderbookSymbolWithResponse call
func ParseGetV2OrderbookSymbolResponse(rsp *http.Response) (*GetV2OrderbookSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2OrderbookSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2TradesSymbolResponse parses an HTTP response from a GetV2TradesSymbolWithResponse call
func ParseGetV2TradesSymbolResponse(rsp *http.Response) (*GetV2TradesSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2TradesSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2WalletsResponse parses an HTTP response from a GetV2WalletsWithResponse call
func ParseGetV2WalletsResponse(rsp *http.Response) (*GetV2WalletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2WalletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetWithdrawsWithdrawResponse parses an HTTP response from a GetWithdrawsWithdrawWithResponse call
func ParseGetWithdrawsWithdrawResponse(rsp *http.Response) (*GetWithdrawsWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithdrawsWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
